const http = require('http'); // Use the http module for HTTP server
const app = require('../app');
const debug = require('debug')('backend:server');
const socket = require('../config/socket.js');
const mongoose = require('mongoose');
mongoose.set("strictQuery", false);
const { mongoURI: db } = require('../config/keys.js');

/**
 * Get ports from environment and store in Express.
 */
const httpPort = normalizePort(process.env.HTTP_PORT || '5001');
app.set('httpPort', httpPort);

/**
 * Create HTTP server.
 */
const httpServer = http.createServer(app);

/**
 * Initialize Socket.io
 */

/**
 * Connect to Mongo database, then allow the servers to listen for requests
 */
mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    console.log("Connected to MongoDB successfully"); // Log successful connection
    debug("Connected to MongoDB successfully");
    httpServer.listen(httpPort);

  })
  .catch(err => {
    console.log("MongoDB connection error:", err); // Log connection error
    debug(err);
  });

/**
 * Event listener for HTTP server "listening" event.
 */
httpServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP and HTTPS server "error" event.
 */

/**
 * Event listener for HTTP and HTTPS server "listening" event.
 */
function onListening() {
  var addrHttp = httpServer.address();
  var bindHttp = typeof addrHttp === 'string'
    ? 'pipe ' + addrHttp
    : 'port ' + addrHttp.port;

  console.log('HTTP Listening on ' + bindHttp); // Log server listening status
  debug('HTTP Listening on ' + bindHttp);
}